package org.jitsi.impl.neomedia.transform.fec;

import org.jitsi.util.*;
import org.junit.*;

import java.nio.*;
import java.util.*;

import static org.junit.Assert.*;

/**
 * Created by bbaldino on 11/10/17.
 */
public class FlexFecHeaderReaderTest
{
    private static byte[] snBaseToBytes(int seqNumBase)
    {
        return ByteBuffer.allocate(4).putInt(seqNumBase).array();
    }

    /**
     * Given a list of sequence numbers and the base sequence number, return
     * a properly formatted flexfec mask field (including the k bits)
     * NOTE: seqNums must be sorted low -> high
     * @param seqNums
     * @param baseSeqNum
     * @return
     */
    private static byte[] seqNumsToMask(List<Integer> seqNums, int baseSeqNum)
    {
        int maxDelta = seqNums.get(seqNums.size() - 1) - baseSeqNum;
        int maskSizeBytes = 0;
        if (maxDelta <= 15)
        {
            maskSizeBytes = 2;
        }
        else if (maxDelta <= 46)
        {
            maskSizeBytes = 4;
        }
        else
        {
            maskSizeBytes = 12;
        }
        byte[] mask = new byte[maskSizeBytes];

        for (Integer seqNum : seqNums)
        {
            //System.out.println("looking at seq num " + seqNum);
            int bitPos = seqNum - baseSeqNum;
            // Take the k bits into account
            if (bitPos <= 15)
            {
                // Mark this one as the last mask chunk, if we spill
                // into the next chunk we'll change it
                mask[0] |= 0x80;
                bitPos += 1;
            }
            else if (bitPos <= 46)
            {
                // We've spilled over into the next mask area, change the
                // first k bit to 0
                mask[0] &= 0x7f;
                // And mark this one as the last
                mask[2] |= 0x80;
                bitPos += 2;
            }
            else
            {
                mask[2] &= 0x7f;
                mask[4] |= 0x80;
                bitPos += 3;
            }
            int byteNum = bitPos / 8;
            // bitNum is indexed from left to right
            int bitNum = bitPos % 8;
            mask[bitPos / 8] |= (0x80 >> bitNum);
        }

        return mask;
    }

    private static final byte NO_R_BIT = 0 << 7;
    private static final byte NO_F_BIT = 0 << 6;
    private static final byte PT_RECOVERY = 127;
    private static final byte[] LENGTH_RECOVERY = { (byte)0xab, (byte)0xcd };
    private static final byte[] TS_RECOVERY = { 0x01, 0x023, 0x45, 0x67 };
    private static final byte SSRC_COUNT = 1;
    private static final byte RESERVED_BITS = 0x00;
    private static final byte[] PROTECTED_SSRC = { 0x11, 0x22, 0x33, 0x44 };
    //private static final byte[] SN_BASE_BYTES = { (byte)0xaa, (byte)0xbb }; // 43707
    private static final int SN_BASE = 43407;
    private static byte[] SN_BASE_BYTES;
    private static final byte PAYLOAD_BITS = 0x00;

    static {
        byte[] snBytes = snBaseToBytes(SN_BASE);
        SN_BASE_BYTES = new byte[]{ snBytes[2], snBytes[3] };
    }

//    @Test
//    public void testGetSeqNumMaskShort()
//    {
//        final byte K_BIT_1 = (byte)(1 << 7);
//        final byte[] maskBytes = {
//            K_BIT_1 | 0x12, 0x34
//        };
//        final byte[] expected = {
//            0x12 << 1, 0x34 << 1
//        };
//
//        LeftToRightBitSet mask = FlexFecHeaderReader.getSeqNumMaskWithoutKBits(maskBytes, 0, 2);
//        assertEquals(expected[0], mask.toByteArray()[0]);
//        assertEquals(expected[1], mask.toByteArray()[1]);
//    }
//
//    @Test
//    public void testGetSeqNumMaskMed()
//    {
//        final byte K_BIT_0 = (byte)(0 << 7);
//        final byte K_BIT_1 = (byte)(1 << 7);
//        final byte[] maskBytes = {
//            K_BIT_0 | 0x12, 0x34,
//            K_BIT_1 | 0x42, 0x34, 0x56, 0x78
//        };
//        final byte[] expected = {
//            0x24, 0x69,
//            (byte)0x08, (byte)0xd1, 0x59, (byte)0xe0
//        };
//
//        LeftToRightBitSet mask = FlexFecHeaderReader.getSeqNumMaskWithoutKBits(maskBytes, 0, 6);
//        assertEquals(expected[0], mask.toByteArray()[0]);
//        assertEquals(expected[1], mask.toByteArray()[1]);
//        assertEquals(expected[2], mask.toByteArray()[2]);
//        assertEquals(expected[3], mask.toByteArray()[3]);
//    }
//
//    @Test
//    public void testGetSeqNumMaskLong()
//    {
//        final byte K_BIT_0 = (byte)(0 << 7);
//        final byte K_BIT_1 = (byte)(1 << 7);
//        final byte[] maskBytes = {
//            K_BIT_0 | 0x12, 0x34,
//            K_BIT_0 | 0x42, 0x34,       0x56,       0x78,
//            K_BIT_1 | 0x42, 0x34,       0x56,       0x78,
//            (byte)0x9a,     (byte)0xbc, (byte)0xcd, (byte)0xef
//        };
//        final byte[] expected = {
//            0x24,           0x69,
//            (byte)0x08,     (byte)0xd1, 0x59,       (byte)0xe2,
//            0x11,           (byte)0xa2, (byte)0xb3, (byte)0xc4,
//            (byte)0xd5,     (byte)0xe6,  0x6f,       0x78
//        };
//
//        LeftToRightBitSet mask = FlexFecHeaderReader.getSeqNumMaskWithoutKBits(maskBytes, 0, 14);
//        assertEquals(expected[0], mask.toByteArray()[0]);
//        assertEquals(expected[1], mask.toByteArray()[1]);
//        assertEquals(expected[2], mask.toByteArray()[2]);
//        assertEquals(expected[3], mask.toByteArray()[3]);
//        assertEquals(expected[4], mask.toByteArray()[4]);
//        assertEquals(expected[5], mask.toByteArray()[5]);
//        assertEquals(expected[6], mask.toByteArray()[6]);
//        assertEquals(expected[7], mask.toByteArray()[7]);
//        assertEquals(expected[8], mask.toByteArray()[8]);
//        assertEquals(expected[9], mask.toByteArray()[9]);
//        assertEquals(expected[10], mask.toByteArray()[10]);
//        assertEquals(expected[11], mask.toByteArray()[11]);
//        assertEquals(expected[12], mask.toByteArray()[12]);
//        assertEquals(expected[13], mask.toByteArray()[13]);
//    }
//
//    /**
//     * This helper function is meaty enough that i think it warrants its own
//     * test...
//     */
//    @Test
//    public void testSeqNumsToMaskShort()
//    {
//        int baseSeqNum = 0;
//        List<Integer> expectedSeqNums = Arrays.asList(10, 12, 14);
//
//        BitSet mask = BitSet.valueOf(seqNumsToMask(expectedSeqNums, baseSeqNum));
//        List<Integer> seqNums = FlexFecHeaderReader.getProtectedSeqNums(mask, baseSeqNum);
//        assertEquals(expectedSeqNums, seqNums);
//    }
//
//    @Test
//    public void testSeqNumsToMaskMed()
//    {
//        int baseSeqNum = 0;
//        List<Integer> expectedSeqNums = Arrays.asList(16, 18, 20);
//
//        BitSet mask = BitSet.valueOf(seqNumsToMask(expectedSeqNums, baseSeqNum));
//        List<Integer> seqNums = FlexFecHeaderReader.getProtectedSeqNums(mask, baseSeqNum);
//        assertEquals(expectedSeqNums, seqNums);
//    }
//
//    @Test
//    public void testSeqNumsToMaskLong()
//    {
//        int baseSeqNum = 0;
//        List<Integer> expectedSeqNums = Arrays.asList(48, 50, 52);
//
//        BitSet mask = BitSet.valueOf(seqNumsToMask(expectedSeqNums, baseSeqNum));
//        List<Integer> seqNums = FlexFecHeaderReader.getProtectedSeqNums(mask, baseSeqNum);
//        assertEquals(expectedSeqNums, seqNums);
//    }

    @Test
    public void testReadHeaderShortMask()
    {
        final byte K_BIT_1 = (byte)(1 << 7);
        final int expectedPacketMaskSize = 2;
        final int expectedFecHeaderSize = 20;
        //final byte[] mask = { K_BIT_1 | 0x08, (byte)0x81 };
        List<Integer> protectedSeqNums = Arrays.asList(SN_BASE + 1, SN_BASE + 4, SN_BASE + 5);
        final byte[] mask = seqNumsToMask(protectedSeqNums, SN_BASE);
        // Just double-check that it's the right size
        assertTrue(mask.length == 2);

        final byte[] flexFecData = {
            NO_R_BIT | NO_F_BIT,    PT_RECOVERY,        LENGTH_RECOVERY[0],     LENGTH_RECOVERY[1],
            TS_RECOVERY[0],         TS_RECOVERY[1],     TS_RECOVERY[2],         TS_RECOVERY[3],
            SSRC_COUNT,             RESERVED_BITS,      RESERVED_BITS,          RESERVED_BITS,
            PROTECTED_SSRC[0],      PROTECTED_SSRC[1],  PROTECTED_SSRC[2],      PROTECTED_SSRC[3],
            SN_BASE_BYTES[0],       SN_BASE_BYTES[1],   mask[0],                mask[1],
            PAYLOAD_BITS,           PAYLOAD_BITS,       PAYLOAD_BITS,           PAYLOAD_BITS
        };
        FlexFecPacket packet = new FlexFecPacket(new byte[12], 0, 12);
        FlexFecHeaderReader.readFlexFecHeader(packet, flexFecData, 0, flexFecData.length);

        assertEquals(RTPUtils.readUint32AsLong(PROTECTED_SSRC, 0), packet.protectedSsrc);
        assertEquals(SN_BASE, packet.seqNumBase);
        //assertTrue(mask.equals(packet.packetMask.toByteArray()));
        assertEquals(packet.flexFecHeaderSizeBytes, expectedFecHeaderSize);
    }

    @Test
    public void testReadHeaderMedMask()
    {
        final byte K_BIT_0 = (byte)(0 << 7);
        final byte K_BIT_1 = (byte)(1 << 7);
        final int expectedPacketMaskSize = 6;
        final int expectedFecHeaderSize = 24;
        final byte[] mask = {
            K_BIT_0 | 0x08, (byte)0x81,
            K_BIT_1 | 0x01, 0x02, 0x03, 0x04
        };


        final byte[] flexFecData = {
            NO_R_BIT | NO_F_BIT,    PT_RECOVERY,        LENGTH_RECOVERY[0],     LENGTH_RECOVERY[1],
            TS_RECOVERY[0],         TS_RECOVERY[1],     TS_RECOVERY[2],         TS_RECOVERY[3],
            SSRC_COUNT,             RESERVED_BITS,      RESERVED_BITS,          RESERVED_BITS,
            PROTECTED_SSRC[0],      PROTECTED_SSRC[1],  PROTECTED_SSRC[2],      PROTECTED_SSRC[3],
            SN_BASE_BYTES[0],       SN_BASE_BYTES[1],   mask[0],                mask[1],
            mask[2],                mask[3],            mask[4],                mask[5],
            PAYLOAD_BITS,           PAYLOAD_BITS,       PAYLOAD_BITS,           PAYLOAD_BITS
        };
        FlexFecPacket packet = new FlexFecPacket(new byte[12], 0, 12);
        FlexFecHeaderReader.readFlexFecHeader(packet, flexFecData, 0, flexFecData.length);

        assertEquals(RTPUtils.readUint32AsLong(PROTECTED_SSRC, 0), packet.protectedSsrc);
        assertEquals(SN_BASE, packet.seqNumBase);
        //assertTrue(mask.equals(packet.packetMask.toByteArray()));
        assertEquals(packet.flexFecHeaderSizeBytes, expectedFecHeaderSize);
    }

    @Test
    public void testReadHeaderLongMask()
    {
        final byte K_BIT_0 = (byte)(0 << 7);
        final byte K_BIT_1 = (byte)(1 << 7);
        final int expectedPacketMaskSize = 14;
        final int expectedFecHeaderSize = 32;
        final byte[] mask = {
            K_BIT_0 | 0x08, (byte)0x81,
            K_BIT_0 | 0x01, 0x02, 0x03, 0x04,
            K_BIT_1 | 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c
        };


        final byte[] flexFecData = {
            NO_R_BIT | NO_F_BIT,    PT_RECOVERY,        LENGTH_RECOVERY[0],     LENGTH_RECOVERY[1],
            TS_RECOVERY[0],         TS_RECOVERY[1],     TS_RECOVERY[2],         TS_RECOVERY[3],
            SSRC_COUNT,             RESERVED_BITS,      RESERVED_BITS,          RESERVED_BITS,
            PROTECTED_SSRC[0],      PROTECTED_SSRC[1],  PROTECTED_SSRC[2],      PROTECTED_SSRC[3],
            SN_BASE_BYTES[0],       SN_BASE_BYTES[1],   mask[0],                mask[1],
            mask[2],                mask[3],            mask[4],                mask[5],
            mask[6],                mask[7],            mask[8],                mask[9],
            mask[10],               mask[11],           mask[12],                mask[13],
            PAYLOAD_BITS,           PAYLOAD_BITS,       PAYLOAD_BITS,           PAYLOAD_BITS
        };
        FlexFecPacket packet = new FlexFecPacket(new byte[12], 0, 12);
        FlexFecHeaderReader.readFlexFecHeader(packet, flexFecData, 0, flexFecData.length);

        assertEquals(RTPUtils.readUint32AsLong(PROTECTED_SSRC, 0), packet.protectedSsrc);
        assertEquals(SN_BASE, packet.seqNumBase);
        //assertTrue(mask.equals(packet.packetMask.toByteArray()));
        assertEquals(packet.flexFecHeaderSizeBytes, expectedFecHeaderSize);
    }

    private static byte[] samplePacket = new byte[] {
        (byte)0x90, 0x6b, 0x4d, (byte)0x80, (byte)0xae, (byte)0x8e, 0x44, 0x7e, (byte)0xc6, 0x23, 0x6c, 0x24, (byte)0xbe, (byte)0xde, 0x00, 0x01,
        0x51, 0x0b, 0x59, 0x00, 0x10, 0x62, 0x04, 0x2f, (byte)0x97, (byte)0xf5, 0x64, (byte)0x86, 0x01, 0x00, 0x00, 0x00,
        (byte)0xc3, (byte)0x8f, (byte)0xc7, 0x09, (byte)0x82, 0x57, 0x31, 0x07, (byte)0x90, 0x00, 0x00, 0x00, (byte)0xbe, (byte)0xde, 0x00, 0x01,
        0x51, 0x00, 0x00, 0x00, (byte)0xc8, (byte)0xb2, (byte)0xef, (byte)0x89, (byte)0xda, 0x36, 0x7f, 0x54, (byte)0xc1, (byte)0x96, 0x55, (byte)0xc4,
        0x23, 0x6a, 0x78, 0x05, (byte)0x83, 0x2b, (byte)0xd1, 0x29, (byte)0x97, 0x75, 0x65, 0x71, (byte)0xc5, 0x69, 0x55, (byte)0xdd,
        (byte)0xf7, 0x1f, (byte)0xc1, (byte)0xc3, 0x09, 0x28, 0x27, 0x11, 0x49, (byte)0xf5, 0x14, (byte)0x8d, (byte)0xc5, 0x33, 0x2b, (byte)0xff,
        (byte)0xf6, (byte)0xbb, 0x5f, 0x36, 0x79, (byte)0x86, (byte)0xc7, (byte)0xbf, (byte)0xd5, 0x5f, 0x69, 0x39, 0x4e, (byte)0xf1, 0x20, (byte)0xcd,
        0x4f, (byte)0x93, 0x23, 0x7e, 0x51, 0x35, 0x54, 0x4e, (byte)0x85, 0x52, (byte)0xdb, 0x2b, 0x00, 0x74, (byte)0xdb, (byte)0xe3,
        (byte)0xaa, (byte)0xc7, 0x3d, 0x25, 0x48, 0x25, (byte)0xac, (byte)0xe7, (byte)0xa0, (byte)0xeb, (byte)0xa6, 0x3d, 0x07, (byte)0xe1, 0x65, (byte)0xe1,
        (byte)0xdd, 0x6e, 0x7b, (byte)0xb7, (byte)0xd6, 0x24, 0x65, (byte)0xd2, (byte)0x8b, (byte)0xbc, (byte)0xaa, 0x14, 0x24, 0x1a, 0x23, (byte)0xb1,
        0x51, 0x30, (byte)0xe6, (byte)0xc4, (byte)0xeb, 0x7d, (byte)0xf7, 0x31, 0x7c, (byte)0xec, 0x79, (byte)0xea, 0x27, (byte)0xa2, (byte)0xf3, 0x65,
        (byte)0xf6, (byte)0xdf, (byte)0x94, (byte)0xa0, (byte)0x8d, (byte)0x8f, 0x07, 0x25, (byte)0xac, (byte)0xeb, (byte)0x91, 0x7b, (byte)0xf9, (byte)0xc5, (byte)0xaf, 0x3c,
        0x28, (byte)0x8c, (byte)0xed, 0x43, 0x4b, (byte)0xb3, 0x56, (byte)0x95, (byte)0xff, (byte)0xea, (byte)0xe5, (byte)0xbc, (byte)0xc7, 0x60, 0x6c, 0x21,
        0x12, 0x23, (byte)0xd0, (byte)0xc4, (byte)0xe3, 0x23, 0x05, (byte)0xc7, (byte)0xc0, 0x4e, 0x02, 0x66, 0x7b, (byte)0xbd, 0x62, 0x31,
        0x42, 0x7d, (byte)0xa8, 0x71, 0x1d, (byte)0xb9, (byte)0x85, 0x74, (byte)0xbd, (byte)0xfa, 0x5b, (byte)0xb5, (byte)0xf7, (byte)0xa0, 0x05, (byte)0xe0,
        (byte)0xd2, 0x03, 0x49, (byte)0xe0, (byte)0xe5, (byte)0xe1, 0x54, 0x50, (byte)0xef, 0x45, 0x0c, 0x48, 0x46, (byte)0xbb, (byte)0xb0, (byte)0x98,
        (byte)0x89, 0x56, 0x20, 0x30, 0x3c, (byte)0xf5, (byte)0xa5, (byte)0xae, (byte)0xe7, (byte)0x85, (byte)0xfa, (byte)0xe9, 0x12, 0x78, (byte)0xdc, 0x5f,
        (byte)0xbc, (byte)0xd5, (byte)0xa7, 0x77, (byte)0xbb, 0x6f, (byte)0xa6, (byte)0x84, 0x7b, 0x28, (byte)0xd8, (byte)0xf7, 0x33, (byte)0xf3, (byte)0xd0, (byte)0xc1,
        (byte)0xbc, 0x10, 0x54, 0x5f, 0x1f, 0x3f, (byte)0xb5, 0x4b, (byte)0xbf, (byte)0xfe, (byte)0x9b, (byte)0xec, 0x5c, 0x39, 0x7d, (byte)0xef,
        0x3f, (byte)0xa5, 0x18, 0x7f, (byte)0xa3, (byte)0x83, (byte)0xfc, 0x5e, (byte)0xdf, (byte)0xec, 0x7d, 0x32, (byte)0xda, 0x1c, 0x05, (byte)0xc9,
        0x19, 0x71, (byte)0xfb, 0x5f, (byte)0xac, (byte)0x9e, (byte)0xcb, 0x65, 0x7d, (byte)0xdc, (byte)0xe5, 0x27, (byte)0xd3, 0x41, 0x76, 0x08,
        (byte)0x8d, (byte)0xd2, (byte)0x92, (byte)0xe2, (byte)0xf0, 0x20, 0x7c, (byte)0xa3, 0x54, (byte)0xca, (byte)0xbc, (byte)0x9d, 0x7a, (byte)0x9c, 0x49, (byte)0xf9,
        0x56, (byte)0x9b, 0x23, 0x2e, 0x5d, 0x77, 0x54, (byte)0xe9, (byte)0x91, (byte)0x9a, 0x1b, (byte)0xd8, (byte)0xeb, (byte)0xf6, 0x4e, 0x60,
        0x7d, (byte)0xf4, (byte)0x84, 0x29, 0x33, 0x1a, (byte)0x93, (byte)0xb4, 0x7d, (byte)0x92, 0x34, (byte)0xb1, (byte)0xcb, (byte)0xe9, (byte)0xcc, 0x77,
        (byte)0xa9, (byte)0xb1, (byte)0xff, (byte)0x92, 0x4b, (byte)0x86, (byte)0xca, 0x28, 0x2b, 0x0e, 0x44, 0x37, 0x2e, (byte)0xa8, 0x1f, 0x13,
        (byte)0x8e, 0x24, (byte)0xe2, 0x47, (byte)0x98, 0x12, (byte)0xb6, 0x09, 0x65, (byte)0xc4, (byte)0xf4, 0x23, (byte)0xbf, (byte)0x8d, (byte)0xf5, 0x7d,
        0x6b, (byte)0xf1, (byte)0x85, (byte)0xc6, (byte)0xcd, 0x34, (byte)0x86, (byte)0xc7, 0x0c, (byte)0xd3, 0x5f, (byte)0x9b, (byte)0x80, (byte)0x9f, 0x05, 0x13,
        (byte)0xe0, (byte)0xd7, (byte)0xc9, (byte)0x87, 0x28, (byte)0xd1, 0x17, 0x60, (byte)0x9e, (byte)0xac, (byte)0x86, 0x3b, 0x28, (byte)0x86, 0x69, (byte)0xf9,
        0x21, (byte)0xbb, 0x2d, (byte)0xfb, 0x40, (byte)0xf3, (byte)0xc1, (byte)0xea, (byte)0xc2, 0x1c, 0x4c, 0x07, 0x40, 0x69, (byte)0xcb, 0x3f,
        (byte)0xa4, (byte)0xdb, 0x13, 0x02, (byte)0xb9, 0x74, 0x76, (byte)0xc0, 0x3f, 0x4e, 0x39, 0x59, 0x1b, (byte)0xa5, (byte)0xbf, 0x39,
        0x5f, 0x23, 0x4d, 0x6c, (byte)0x8a, 0x46, (byte)0x9d, 0x64, (byte)0xac, 0x5c, 0x7e, (byte)0x97, (byte)0xda, (byte)0x9d, 0x78, (byte)0xb4,
        0x5e, 0x73, 0x71, 0x26, 0x09, (byte)0xa2, (byte)0xca, 0x1c, 0x04, 0x2e, 0x41, 0x3f, 0x57, 0x4b, 0x06, 0x30,
        (byte)0x9c, (byte)0xfc, 0x4c, 0x3f, (byte)0xec, (byte)0xa4, 0x63, (byte)0xb6, (byte)0x90, 0x76, (byte)0xd4, 0x02, (byte)0xad, 0x0b, (byte)0xcd, (byte)0xf2,
        (byte)0xf9, 0x36, 0x45, (byte)0xb8, 0x60, 0x43, 0x50, (byte)0xba, (byte)0x9e, 0x16, (byte)0xb6, (byte)0xe8, (byte)0xc7, 0x2b, 0x2f, 0x2a,
        0x3d, 0x31, 0x0a, (byte)0xe1, (byte)0xac, 0x28, 0x61, (byte)0xce, 0x33, (byte)0xb2, (byte)0xf4, 0x0f, (byte)0xbc, 0x47, (byte)0xa5, 0x0f,
        0x15, (byte)0xbd, 0x50, (byte)0xa8, (byte)0xfe, 0x0f, (byte)0xaf, 0x01, (byte)0xb4, 0x47, (byte)0xf9, (byte)0xd1, 0x70, (byte)0x9c, (byte)0xc7, 0x26,
        (byte)0xad, (byte)0xf3, 0x4f, 0x0a, 0x34, (byte)0x82, 0x5e, (byte)0xf8, (byte)0x9e, (byte)0x8f, (byte)0xa6, (byte)0xb8, (byte)0xa2, 0x49, 0x55, 0x3e,
        0x02, 0x02, (byte)0xea, (byte)0x8b, (byte)0xf3, (byte)0xa3, (byte)0x84, (byte)0xc0, (byte)0x8b, 0x4d, (byte)0xc6, (byte)0xf8, (byte)0xc8, 0x36, 0x6e, 0x58,
        (byte)0xbb, (byte)0xe5, 0x07, 0x26, (byte)0xdd, 0x7e, (byte)0xe3, (byte)0xef, (byte)0xcf, 0x4d, 0x05, 0x1c, (byte)0xca, 0x1f, 0x0d, 0x1a,
        0x58, (byte)0xda, (byte)0x9e, 0x0c, 0x49, 0x3f, 0x0b, (byte)0xad, (byte)0xef, (byte)0xe6, 0x71, (byte)0x92, 0x4b, (byte)0xda, 0x70, (byte)0xd1,
        0x27, 0x66, (byte)0xc5, (byte)0xf7, 0x11, 0x50, (byte)0xd0, 0x50, (byte)0xba, 0x4b, (byte)0xaf, 0x30, (byte)0xe4, 0x31, 0x72, 0x00,
        0x3d, (byte)0xbb, 0x77, (byte)0x9e, 0x30, 0x7e, (byte)0x82, 0x03, (byte)0xdc, 0x1d, 0x69, (byte)0xde, (byte)0x93, (byte)0x86, 0x6c, 0x3c,
        0x68, 0x43, 0x29, 0x19, 0x0f, (byte)0xee, 0x37, (byte)0xad, (byte)0xc1, (byte)0xe4, 0x76, (byte)0xef, (byte)0xfb, (byte)0x83, (byte)0xaf, 0x31,
        (byte)0xbd, 0x1c, (byte)0x8d, (byte)0xea, (byte)0x93, 0x0d, (byte)0x85, (byte)0x8e, (byte)0xc0, (byte)0xe9, (byte)0xd0, (byte)0xe1, (byte)0xe3, 0x19, (byte)0x88, 0x69,
        (byte)0x8a, (byte)0xd8, (byte)0x84, (byte)0xb3, 0x15, 0x2e, (byte)0xcc, (byte)0xe0, 0x33, (byte)0xcc, 0x68, (byte)0x93, 0x6e, 0x06, (byte)0xe0, 0x3f,
        (byte)0xb8, 0x09, (byte)0x9f, 0x7d, (byte)0xc6, 0x67, (byte)0xa0, 0x1b, (byte)0x96, 0x2d, 0x57, 0x16, (byte)0xc3, 0x13, (byte)0xf4, 0x75,
        0x76, 0x7a, 0x67, (byte)0xc9, 0x12, 0x12, 0x49, (byte)0x9c, (byte)0xa2, (byte)0xb9, (byte)0x98, 0x5e, (byte)0xbb, 0x61, 0x46, (byte)0xba,
        0x17, 0x17, 0x5f, 0x35, (byte)0xd8, 0x43, (byte)0xe7, 0x31, (byte)0xf9, 0x43, 0x76, 0x2a, (byte)0xb6, (byte)0xb7, (byte)0xf6, (byte)0xf3,
        0x6f, 0x61, 0x49, (byte)0x84, (byte)0xf1, 0x10, 0x5d, 0x79, (byte)0xaa, (byte)0x96, (byte)0xac, (byte)0xa2, (byte)0xc4, 0x1b, 0x4b, 0x47,
        0x55, 0x2e, 0x7a, 0x62, (byte)0xfd, 0x23, (byte)0x8b, (byte)0xb3, (byte)0xa7, (byte)0xa9, 0x5a, (byte)0x94, (byte)0xba, 0x26, 0x14, 0x78,
        (byte)0xa3, 0x5d, (byte)0x9d, 0x44, (byte)0xa0, 0x47, (byte)0xd5, 0x16, (byte)0xd5, 0x70, (byte)0x84, 0x5e, (byte)0xbd, (byte)0x84, (byte)0x92, (byte)0xd2,
        0x7c, 0x4b, 0x62, 0x50, (byte)0xfc, 0x44, (byte)0xab, 0x1e, (byte)0x9a, (byte)0xae, 0x29, (byte)0xd2, 0x66, (byte)0x9a, (byte)0x81, 0x6a,
        (byte)0xc3, (byte)0xf8, (byte)0xa9, 0x2c, (byte)0x8a, (byte)0x96, 0x00, (byte)0xca, (byte)0xf5, 0x3f, 0x27, (byte)0x8a, (byte)0x95, (byte)0xf9, 0x78, 0x04,
        0x05, 0x02, (byte)0xdd, (byte)0xb6, (byte)0xb1, (byte)0xc7, 0x48, 0x62, 0x31, (byte)0xba, 0x46, (byte)0x8a, (byte)0xb4, 0x42, 0x58, 0x28,
        0x56, 0x5f, (byte)0xe6, (byte)0xf1, 0x3b, 0x21, 0x66, 0x3e, (byte)0xef, (byte)0xf3, 0x68, 0x55, (byte)0x90, 0x26, (byte)0xb5, (byte)0xd1,
        (byte)0xd6, 0x50, 0x74, 0x1c, (byte)0xce, 0x33, (byte)0xe0, (byte)0x95, (byte)0xee, 0x62, (byte)0x9c, 0x6b, 0x56, 0x58, (byte)0xc9, (byte)0x84,
        (byte)0xf0, 0x31, 0x31, (byte)0xd8, (byte)0xf9, 0x70, (byte)0xec, 0x6a, (byte)0xf7, 0x0d, 0x1e, (byte)0xf5, (byte)0xb2, 0x2a, 0x08, (byte)0xb4,
        0x5f, 0x34, 0x17, 0x79, 0x4f, 0x2e, 0x65, 0x48, 0x6b, (byte)0xc2, 0x7c, (byte)0x82, (byte)0xd5, (byte)0x95, 0x42, 0x66,
        0x48, 0x7e, 0x2c, 0x4c, 0x22, (byte)0x98, (byte)0x84, (byte)0xe8, 0x49, 0x7b, 0x4a, 0x47, (byte)0x9e, (byte)0xf6, 0x72, 0x62,
        0x62, 0x4b, 0x13, (byte)0xa9, (byte)0xd3, 0x54, 0x04, (byte)0xb7, 0x3b, (byte)0xbd, 0x65, 0x1d, 0x65, (byte)0x96, (byte)0xfc, (byte)0xd3,
        (byte)0x81, (byte)0x8e, (byte)0x96, (byte)0xc1, 0x53, (byte)0xe8, (byte)0xd3, (byte)0x91, 0x4c, 0x22, (byte)0xe2, 0x18, 0x2c, 0x51, (byte)0xcd, (byte)0xb6,
        0x07, (byte)0xb5, (byte)0xca, (byte)0xe4, 0x3d, 0x70, 0x2e, (byte)0xc9, 0x3c, (byte)0x9b, 0x5d, 0x37, 0x35, 0x5e, (byte)0xbc, (byte)0xb8,
        0x5b, 0x08, 0x61, (byte)0x88, 0x53, 0x7e, 0x0c, (byte)0xc8, 0x27, 0x30, 0x4e, (byte)0x9f, (byte)0x80, 0x5b, (byte)0x88, (byte)0xdc,
        (byte)0x84, (byte)0xd8, (byte)0xab, (byte)0xcd, 0x11, 0x1d, 0x5e, 0x33, 0x22, 0x02, (byte)0x94, 0x54, (byte)0xb9, 0x27, (byte)0xcc, 0x43,
        (byte)0xae, 0x44, (byte)0x9f, (byte)0xf4, 0x4e, 0x35, (byte)0xe8, (byte)0xbd, (byte)0xe4, 0x6b, 0x46, 0x7d, 0x17, 0x69, (byte)0xa6, 0x13,
        (byte)0xb3, 0x6c, (byte)0xfa, 0x46, 0x4b, 0x5a, (byte)0xb2, 0x62, 0x3c, 0x3b, 0x28, 0x4d, 0x41, (byte)0xc8, 0x26, 0x07,
        0x15, 0x7f, 0x25, (byte)0x9e, (byte)0x92, (byte)0x82, (byte)0x89, 0x47, (byte)0xf0, (byte)0xea, 0x00, (byte)0xd3, (byte)0x86, 0x6f, (byte)0xa5, (byte)0xfa,
        0x13, 0x39, 0x57, (byte)0xfe, (byte)0x9d, 0x25, 0x74, (byte)0xf0, (byte)0xe3, 0x30, (byte)0x9e, 0x5b, (byte)0xab, 0x05, 0x3e, 0x37,
        (byte)0x9c, (byte)0xd1, 0x20, (byte)0xeb, 0x2f, (byte)0xc3, (byte)0xa5, (byte)0xf5, 0x73, 0x71, 0x55, 0x0f, 0x61, 0x7f, 0x05, (byte)0x80,
        (byte)0xb4, 0x6f, (byte)0xf3, 0x4c, (byte)0xe7, (byte)0xd4, (byte)0xbd, (byte)0xd8, 0x76, (byte)0xa9, (byte)0x83, 0x4a, (byte)0x88, (byte)0xb0, (byte)0xed, (byte)0x98,
        (byte)0xf4, 0x64, (byte)0x91, 0x1f, (byte)0xfc, 0x18, 0x20, 0x11, (byte)0x83, (byte)0xb1, (byte)0xbb, (byte)0xea, 0x2a, 0x60, 0x38, (byte)0xa0,
        0x31, 0x10, 0x33, 0x0d, (byte)0xfa, (byte)0xb8, (byte)0xb6, (byte)0x8b, (byte)0x84, 0x3e, 0x2c, 0x72
    };

    @Test
    public void testGetProtectedSeqNums()
    {
        //FlexFecPacket p = new FlexFecPacket(samplePacket, 0, samplePacket.length);


        //System.out.println(p.getProtectedSequenceNumbers());

    }

}